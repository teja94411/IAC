{
    "sourceFile": "AWS_Resources/modules/threeTierArchitecture/main.tf",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1737954771910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1737954771910,
            "name": "Commit-0",
            "content": "# 3-Tier AWS Architecture\r\n# Creating VPC Configuration\r\nresource \"aws_vpc\" \"myvpc\" {\r\n  cidr_block = var.vpc_cidr\r\n  tags = {\r\n    Name = \"MyVPC\"\r\n  }\r\n}\r\n\r\n# Creating Public Subnet 1\r\nresource \"aws_subnet\" \"subnet_1\" {\r\n  vpc_id                  = aws_vpc.myvpc.id\r\n  cidr_block              = var.aws_subnet_1\r\n  availability_zone       = var.availability_zone_s1\r\n  map_public_ip_on_launch = true\r\n  tags = {\r\n    Name = \"Public Subnet 1\"\r\n  }\r\n}\r\n\r\n# Creating Private Subnet 2\r\nresource \"aws_subnet\" \"subnet_2\" {\r\n  vpc_id                  = aws_vpc.myvpc.id\r\n  cidr_block              = var.aws_subnet_2\r\n  availability_zone       = var.availability_zone_s2\r\n  map_public_ip_on_launch = false\r\n  tags = {\r\n    Name = \"Private Subnet 2\"\r\n  }\r\n}\r\n\r\n# Internet Gateway for public subnet\r\nresource \"aws_internet_gateway\" \"igw\" {\r\n  vpc_id = aws_vpc.myvpc.id\r\n  tags = {\r\n    Name = \"MyInternetGateway\"\r\n  }\r\n}\r\n\r\n# Elastic IP for NAT Gateway (needed for private subnet internet access)\r\nresource \"aws_eip\" \"nat_ip\" {\r\n  domain = \"vpc\"\r\n}\r\n\r\n# NAT Gateway in Public Subnet 1\r\nresource \"aws_nat_gateway\" \"nat_gw\" {\r\n  subnet_id     = aws_subnet.subnet_1.id\r\n  allocation_id = aws_eip.nat_ip.id\r\n  tags = {\r\n    Name = \"MyNATGateway\"\r\n  }\r\n}\r\n\r\n# Public Route Table (for Subnet 1)\r\nresource \"aws_route_table\" \"public_rt\" {\r\n  vpc_id = aws_vpc.myvpc.id\r\n\r\n  route {\r\n    cidr_block = \"0.0.0.0/0\"\r\n    gateway_id = aws_internet_gateway.igw.id\r\n  }\r\n\r\n  tags = {\r\n    Name = \"Public Route Table\"\r\n  }\r\n}\r\n\r\n# Associating Public Route Table with Subnet 1\r\nresource \"aws_route_table_association\" \"public_rta\" {\r\n  subnet_id      = aws_subnet.subnet_1.id\r\n  route_table_id = aws_route_table.public_rt.id\r\n}\r\n\r\n# Private Route Table (for Subnet 2)\r\nresource \"aws_route_table\" \"private_rt\" {\r\n  vpc_id = aws_vpc.myvpc.id\r\n\r\n  route {\r\n    cidr_block     = \"0.0.0.0/0\"\r\n    nat_gateway_id = aws_nat_gateway.nat_gw.id\r\n  }\r\n\r\n  tags = {\r\n    Name = \"Private Route Table\"\r\n  }\r\n}\r\n\r\n# Associating Private Route Table with Subnet 2\r\nresource \"aws_route_table_association\" \"private_rta\" {\r\n  subnet_id      = aws_subnet.subnet_2.id\r\n  route_table_id = aws_route_table.private_rt.id\r\n}\r\n\r\n# Security Group Configuration\r\nresource \"aws_security_group\" \"sg\" {\r\n  vpc_id = aws_vpc.myvpc.id\r\n\r\n  ingress {\r\n    description = \"Allow SSH\"\r\n    from_port   = 22\r\n    to_port     = 22\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = var.ingress_sg\r\n  }\r\n\r\n  ingress {\r\n    description = \"Allow HTTP\"\r\n    from_port   = 80\r\n    to_port     = 80\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = var.ingress_sg\r\n  }\r\n\r\n  ingress {\r\n    description = \"Allow HTTPS\"\r\n    from_port   = 443\r\n    to_port     = 443\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = var.ingress_sg\r\n  }\r\n\r\n  egress {\r\n    description = \"Allow all outbound traffic\"\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = var.egress_sg\r\n  }\r\n\r\n  tags = {\r\n    Name = \"WebServerSG\"\r\n  }\r\n}\r\n\r\n# Creating a Key Pair dynamically every time\r\nresource \"random_id\" \"keypair_id\" {\r\n  byte_length = 8\r\n}\r\n\r\nresource \"tls_private_key\" \"generated_key\" {\r\n  algorithm = \"RSA\"\r\n  rsa_bits  = 2048\r\n}\r\n\r\nresource \"aws_key_pair\" \"dynamic_keypair\" {\r\n  key_name   = \"ec2-keypair-${random_id.keypair_id.hex}\"\r\n  public_key = tls_private_key.generated_key.public_key_openssh \r\n\r\n  tags = {\r\n    Name = \"KeyPair-${random_id.keypair_id.hex}\"\r\n  }\r\n}\r\n\r\nresource \"null_resource\" \"save_private_key\" {\r\n  provisioner \"local-exec\" {\r\n    command = \"echo '${tls_private_key.generated_key.private_key_pem}' > ${var.key_pair_base_download_path}/Downloads/ec2-keypair-${random_id.keypair_id.hex}.pem\"\r\n  }\r\n\r\n  depends_on = [aws_key_pair.dynamic_keypair]\r\n}\r\n\r\n\r\n\r\n# EC2 Instance Configuration in the Private Subnet (with NAT Gateway for Internet Access)\r\nresource \"aws_instance\" \"webserver\" {\r\n  ami           = var.ami_id\r\n  instance_type = var.instance_type\r\n  subnet_id     = aws_subnet.subnet_1.id\r\n  vpc_security_group_ids = [aws_security_group.sg.id]\r\n  key_name      = aws_key_pair.dynamic_keypair.key_name  \r\n  associate_public_ip_address = true\r\n\r\n  tags = {\r\n    Name = var.ec2_server\r\n  }\r\n}\r\n\r\n# Creating an Application Load Balancer\r\nresource \"aws_lb\" \"my_alb\" {\r\n  name               = \"my-alb\"\r\n  internal           = false\r\n  load_balancer_type = \"application\"\r\n  security_groups    = [aws_security_group.alb_sg.id]\r\n  subnets            = [aws_subnet.subnet_1.id, aws_subnet.subnet_2.id]\r\n\r\n  enable_deletion_protection = false\r\n\r\n  tags = {\r\n    Name = \"MyALB\"\r\n  }\r\n}\r\n\r\n# Creating Target Group\r\nresource \"aws_lb_target_group\" \"my_target_group\" {\r\n  name     = \"my-target-group\"\r\n  port     = 80\r\n  protocol = \"HTTP\"\r\n  vpc_id   = aws_vpc.myvpc.id\r\n\r\n  health_check {\r\n    path                = \"/\"\r\n    interval            = 30\r\n    timeout             = 5\r\n    healthy_threshold   = 3\r\n    unhealthy_threshold = 3\r\n  }\r\n\r\n  tags = {\r\n    Name = \"MyTargetGroup\"\r\n  }\r\n}\r\n\r\n# Creating Load Balancer Listener\r\nresource \"aws_lb_listener\" \"my_alb_listener\" {\r\n  load_balancer_arn = aws_lb.my_alb.arn\r\n  port              = \"80\"\r\n  protocol          = \"HTTP\"\r\n\r\n  default_action {\r\n    type             = \"fixed-response\"\r\n    fixed_response {\r\n      status_code = 200\r\n      content_type = \"text/plain\"\r\n      message_body = \"OK\"\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_security_group\" \"alb_sg\" {\r\n  name        = \"alb_sg\"\r\n  description = \"Allow HTTP traffic to ALB\"\r\n  vpc_id      = aws_vpc.myvpc.id  \r\n\r\n  ingress {\r\n    from_port   = 80\r\n    to_port     = 80\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]  \r\n  }\r\n\r\n  egress {\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]  \r\n  }\r\n\r\n  tags = {\r\n    Name = \"ALB Security Group\"\r\n  }\r\n}\r\n\r\nresource \"aws_db_instance\" \"my_sql_db\" {\r\n  engine = \"mysql\"\r\n  instance_class = \"db.t4g.micro\"\r\n  vpc_security_group_ids = [aws_security_group.sg.id]\r\n  db_subnet_group_name = aws_db_subnet_group.subnet_group.name\r\n  username = \"Admin\"\r\n  password = var.db_password\r\n  allocated_storage = 20 \r\n  #storage_type = gp2\r\n  multi_az = false\r\n  publicly_accessible = false  \r\n # skip_final_snapshot = true\r\n  #final_snapshot_identifier = \"final-snapshot-before-destroy-${random_id.keypair_id.hex}\"\r\n}\r\n\r\nresource \"aws_db_subnet_group\" \"subnet_group\" {\r\n  name = \"db-subnet-group\"\r\n  subnet_ids = [aws_subnet.subnet_1.id,aws_subnet.subnet_2.id]\r\n  tags = {\r\n    Name = \"DB Subnet Group\"\r\n  }\r\n}\r\n\r\nresource \"aws_security_group\" \"db_sec_group\" {\r\n  name        = \"db_sg\"\r\n  description = \"Allow inbound MySQL traffic to DB tier\"\r\n  vpc_id      = aws_vpc.myvpc.id\r\n\r\n  ingress {\r\n    from_port   = 3306\r\n    to_port     = 3306\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [var.aws_subnet]\r\n  }\r\n\r\n  egress {\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\nresource \"aws_launch_template\" \"scaling_template\" {\r\n  image_id      = var.ami_id\r\n  instance_type = var.instance_type\r\n  key_name      = aws_key_pair.dynamic_keypair.key_name\r\n  vpc_security_group_ids = [aws_security_group.sg.id]\r\n\r\n}\r\n\r\nresource \"aws_autoscaling_group\" \"webserver_asg\" {\r\n  depends_on = [\r\n    aws_launch_template.scaling_template,  # Ensure launch template is created first\r\n    aws_subnet.subnet_1,                   # Ensure subnet_1 is created first\r\n    aws_subnet.subnet_2                    # Ensure subnet_2 is created first\r\n  ]\r\n  desired_capacity = 2\r\n  min_size = 2\r\n  max_size = 5\r\n  vpc_zone_identifier  = [aws_subnet.subnet_1.id, aws_subnet.subnet_2.id]\r\n  launch_template {\r\n    id      = aws_launch_template.scaling_template.id\r\n    \r\n  }\r\n  health_check_type          = \"EC2\"\r\n  health_check_grace_period = 300\r\n  target_group_arns = [aws_lb_target_group.my_target_group.arn] \r\n \r\n}\r\n\r\nresource \"aws_cloudwatch_metric_alarm\" \"cpu_utilization_high\" {\r\n  alarm_name                = \"High-CPU-Utilization\"\r\n  comparison_operator       = \"GreaterThanThreshold\"\r\n  evaluation_periods        = 1\r\n  metric_name               = \"CPUUtilization\"\r\n  namespace                 = \"AWS/EC2\"\r\n  period                    = 300\r\n  threshold                 = 70\r\n  dimensions = {\r\n    InstanceId = aws_instance.webserver.id\r\n  }\r\n  statistic                 = \"Average\"\r\n  tags = {\r\n    name = \"High-Utilization-alarm\"\r\n  }\r\n}\r\n\r\nresource \"aws_cloudwatch_metric_alarm\" \"cpu_utilization_low\" {\r\n  alarm_name                = \"Low-CPU-Utilization\"\r\n  comparison_operator       = \"LessThanThreshold\"\r\n  evaluation_periods        = 1\r\n  metric_name               = \"CPUUtilization\"\r\n  namespace                 = \"AWS/EC2\"\r\n  period                    = 300\r\n  threshold                 = 30\r\n  dimensions = {\r\n    InstanceId = aws_instance.webserver.id\r\n  }\r\n  statistic                 = \"Average\"\r\n  tags = {\r\n    name = \"Low-Utilization-alarm\"\r\n  }\r\n}\r\n\r\n\r\n"
        }
    ]
}